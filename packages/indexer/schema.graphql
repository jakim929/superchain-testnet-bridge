# The entity types defined below map to database tables.
# The functions you write as event handlers inside the `src/` directory are responsible for creating and updating records in those tables.
# Your schema will be more flexible and powerful if it accurately models the logical relationships in your application's domain.
# Visit the [documentation](https://ponder.sh/guides/design-your-schema) or the [`examples/`](https://github.com/0xOlias/ponder/tree/main/examples) directory for further guidance on designing your schema.

type OpStackChain @entity {
  id: Int! # `l2ChainId`
  l1ChainId: Int!
  l2ChainId: Int!
}

enum CrossDomainMessageStatus {
  SENT
  RELAYED
  FAILED
}

# query patterns
# transactionHash => get all cross domain messages sent/received in that transaction
# crossDomainMessage => get all related events & transaction hashes

type CrossDomainMessage @entity {
  id: String! # targetChainID_messageHash + sourceChainId + targetChainId 
  opStackChain: OpStackChain!
  status: CrossDomainMessageStatus!
  msgHash: Bytes!
  sourceChainId: Int!
  targetChainId: Int!
  target: Bytes!
  sender: Bytes!
  message: Bytes!
  messageNonce: BigInt!
  gasLimit: BigInt!
  value: BigInt!
  lastUpdatedAtBlockTimestamp: Int!
  transactionHashes: [Bytes!]!
  sentMessageEventTransactionFrom: Bytes!
  sentMessageEvent: SentMessageEvent!
  sentMessageExtension1Event: SentMessageExtension1Event! 
  relayedMessageEvent: RelayedMessageEvent
  failedRelayedMessageEvent: FailedRelayedMessageEvent
}

type SentMessageEvent @entity {
  id: String! # `SentMessageEvent_sourceChainId_targetChainId_${log id}`
  opStackChain: OpStackChain!
  sourceChainId: Int!
  targetChainId: Int!
  blockTimestamp: Int! 
  transactionHash: Bytes!
  logIndex: Int! # hacky: this will be used to find the corresponding L1SentMessageExtension1Event
  target: Bytes!
  sender: Bytes!
  message: Bytes!
  messageNonce: BigInt!
  gasLimit: BigInt!
}

type SentMessageExtension1Event @entity {
  id: String! # `SentMessageExtension1Event_sourceChainId_targetChainId_${log id}`
  opStackChain: OpStackChain!
  sourceChainId: Int!
  targetChainId: Int!
  blockTimestamp: Int! 
  transactionHash: Bytes!
  logIndex: Int!
  sender: Bytes!
  value: BigInt!
}

type RelayedMessageEvent @entity {
  id: String! # `RelayedMessageEvent_sourceChainId_targetChainId_${log id}`
  opStackChain: OpStackChain!
  sourceChainId: Int!
  targetChainId: Int!
  blockTimestamp: Int! 
  transactionHash: Bytes!
  logIndex: Int!
  msgHash: Bytes!
}

type FailedRelayedMessageEvent @entity {
  id: String! # `FailedRelayedMessageEvent_sourceChainId_targetChainId_${log id}`
  opStackChain: OpStackChain!
  sourceChainId: Int!
  targetChainId: Int!
  blockTimestamp: Int! 
  transactionHash: Bytes!
  logIndex: Int! 
  msgHash: Bytes!
}
